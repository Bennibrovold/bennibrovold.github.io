{"version":3,"sources":["components/helpers/loader/index.jsx","layouts/Default/Header/header.jsx","layouts/Default/Footer/footer.jsx","layouts/Default/Layout.jsx","App.js","layouts/Empty/Layout.jsx","serviceWorker.js","index.js"],"names":["Loader","className","header","to","Component","footer","layout","props","this","id","children","Main","lazy","Works","App","_","AppRoute","component","Layout","rest","render","fallback","exact","path","Default","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gXAaeA,MAVf,WACI,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,a,oCCFNC,G,uLAEb,OACI,yBAAKD,UAAU,aACX,yBAAKA,UAAU,WACX,kBAAC,IAAD,CAAME,GAAG,KAAT,SAEJ,yBAAKF,UAAU,YACX,kBAAC,IAAD,CAAME,GAAG,UAAT,e,GARgBC,cCDfC,G,uLAEb,OACI,yBAAKJ,UAAU,UACX,2E,GAJoBG,cCEfE,G,kBAEjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDA,MAAQA,EAFE,E,sEAKT,IACEA,EAAUC,KAAVD,MACR,OACI,yBAAKE,GAAG,oBACJ,kBAAC,EAAD,MACA,yBAAKA,GAAG,yBACFF,EAAMG,UAEZ,kBAAC,EAAD,W,GAfoBN,cCG9BO,G,MCL8BP,Y,YDKvBQ,gBAAK,kBAAM,iCAClBC,EAAQD,gBAAK,kBAAM,sDAsBVE,EApBH,SAAAC,GACV,IAAMC,EAAW,SAAC,GAAD,IAAcZ,EAAd,EAAGa,UAA8BC,EAAjC,EAAyBZ,OAAmBa,EAA5C,6CACf,kBAAC,IAAD,iBAAWA,EAAX,CAAiBC,OAAQ,SAAAb,GAAK,OAC5B,kBAACW,EAAD,KACE,kBAACd,EAAcG,SAIrB,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUc,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAACL,EAAD,CAAUM,OAAK,EAACC,KAAK,IAAIjB,OAAQkB,EAASP,UAAWN,IACrD,kBAACK,EAAD,CAAUO,KAAK,SAASjB,OAAQkB,EAASP,UAAWJ,QEZ1CY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASV,OAAO,kBAAC,EAAD,MAASW,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8fbdca7d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './style.scss';\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div className=\"loader-wrapper\">\r\n            <div className=\"loader\">\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport \"./style.scss\";\n\nexport default class header extends Component {\n    render() {\n        return (\n            <div className=\"df-navbar\">\n                <div className=\"df-logo\">\n                    <Link to=\"/\">Main</Link>\n                </div>\n                <div className=\"df-works\">\n                    <Link to=\"/works\">Works</Link>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './footer.scss';\n\nexport default class footer extends Component {\n    render() {\n        return (\n            <div className=\"footer\">\n                <p>Website created by Andrew Rybakov @2020</p>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Header from './Header/header';\nimport Footer from './Footer/footer';\nimport './layout.scss';\n\nexport default class layout extends Component {\n\n    constructor(props) {\n        super(props);\n        this.props = props;\n    }\n\n    render() {\n        const { props } = this;\n        return (\n            <div id=\"default_template\">\n                <Header />\n                <div id=\"defalut_template_body\">\n                    { props.children }\n                </div>\n                <Footer />\n            </div>\n        )\n    }\n}\n","import React, { Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Loader from './components/helpers/loader/';\nimport Default from './layouts/Default/Layout';\nimport Empty from './layouts/Empty/Layout';\nimport 'semantic-ui-css/semantic.min.css'\nimport './style.scss';\n\nconst Main = lazy(() => import('./components/screens/main/main'))\nconst Works = lazy(() => import('./components/screens/works'))\n\nconst App = _ => {\n  const AppRoute = ({ component: Component, layout: Layout, ...rest }) => (\n    <Route {...rest} render={props => (\n      <Layout>\n        <Component {...props} />\n      </Layout>\n    )} />\n  )\n  return (\n    <Router>\n      <Suspense fallback={<Loader />}>\n        <Switch>\n          <AppRoute exact path=\"/\" layout={Default} component={Main} />\n          <AppRoute path=\"/works\" layout={Default} component={Works} />\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react'\r\nimport \"./styles.scss\";\r\n\r\nexport default class layout extends Component {\r\n    render() {\r\n        const { props } = this;\r\n        return (\r\n            <div id=\"default_template\">\r\n                { props.children }\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}